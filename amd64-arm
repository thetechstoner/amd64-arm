#!/bin/bash

: << 'COMMENT'
setup commands in terminal:

# install debian bookworm
chmod +x <path_to_amd64-arm>
sudo <path_to_amd64-arm>

# install (choose debian version)
chmod +x <path_to_amd64-arm>
sudo <path_to_amd64-arm> <debian_codename>

# install .deb file in chroot environment
chmod +x <path_to_amd64-arm>
sudo <path_to_amd64-arm> install-deb <path_to_deb_file>

# uninstall .deb file in chroot environment
chmod +x <path_to_amd64-arm>
sudo <path_to_amd64-arm> uninstall-deb <path_to_deb_file>

# uninstall
chmod +x <path_to_amd64-arm>
sudo <path_to_amd64-arm> uninstall

usage:

# access chroot terminal (root)
amd64

# chroot terminal as root
schroot -c amd64 -u root -d /home

# chroot terminal as user
schroot -c amd64 -u $USER -d /home

# exit chroot terminal
exit

# run amd64.desktop
Menu > Accessories > Terminal (amd64)

win64 and Win32 applications on arm64 Linux https://github.com/AndreRH/hangover
COMMENT

set -euo pipefail

DEF_VER=bookworm
CHROOT_DIR=/amd64

# Check if root
if [[ $(id -u) -ne 0 ]]; then
    echo 'Requires root. Exiting...'
    exit 1
fi

if [[ "${1:-}" == "uninstall" ]]; then
    echo "Uninstalling amd64 chroot environment..."

    # Unmount bind mounts and special filesystems
    for mnt in dev/snd dev/shm dev/pts dev/binderfs etc/resolv.conf sys/fs/cgroup tmp/.X11-unix dev proc sys run tmp; do
        umount -l "$CHROOT_DIR/$mnt" &>/dev/null || true
    done

    # Remove chroot directory
    rm -rf "$CHROOT_DIR"

    # Remove schroot config
    rm -f /etc/schroot/chroot.d/amd64.conf
    rm -rf /etc/schroot/amd64

    # Remove desktop launcher and launcher script
    rm -f /usr/share/applications/amd64.desktop
    rm -f /usr/share/applications/*-amd64.desktop
    find /usr/share/icons/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
    find /usr/share/pixmaps/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
    rm -f /usr/bin/amd64
    update-desktop-database
    gtk-update-icon-cache
    echo "Uninstall complete."
    exit 0
fi

# .deb file installation in chroot
if [[ "${1:-}" == "install-deb" && -n "${2:-}" ]]; then
    DEB_FILE="$2"
    if [[ ! -f "$DEB_FILE" ]]; then
        echo "Error: .deb file not found: $DEB_FILE"
        exit 1
    fi
    echo "Installing $DEB_FILE in chroot environment..."
    mkdir -p "$CHROOT_DIR/tmp/install-deb/"
    cp "$DEB_FILE" "$CHROOT_DIR/tmp/install-deb/"
    cd "$CHROOT_DIR/tmp/install-deb/"
    DEB_FILENAME=$(basename "$DEB_FILE")
    chroot "$CHROOT_DIR" apt-get update && chroot "$CHROOT_DIR" apt install -y "/tmp/install-deb/$DEB_FILENAME"
    chroot $CHROOT_DIR apt --fix-broken install -y
    # install desktop-file and icons to system from deb file
    if dpkg-deb --fsys-tarfile "$DEB_FILENAME" | tar -tf - | grep -q '^\.*/usr/share/applications/'; then
        desktop_files=$(dpkg-deb --contents "$DEB_FILENAME" | awk '{print $NF}' | grep '^\.\/usr\/share\/applications\/.*\.desktop$')
        mkdir -p desktop-files/
        dpkg-deb --fsys-tarfile "$DEB_FILENAME" | tar xvf - --xform='s|.*/||' -C desktop-files $desktop_files
        for file in desktop-files/*.desktop; do
            # Only modify if not already appended
            sed -i '/^Name=/ s/\(.*\)\( (amd64)\)\?$/\1 (amd64)/' "$file"
        done
        for file in desktop-files/*.desktop; do
            # Only modify if not already appended
            sed -i '/^Icon=/ s/\(.*\)\(-amd64\)\?$/\1-amd64/' "$file"
        done
        for file in desktop-files/*.desktop; do
            # only modify if not already Prepended
            sed -i '/^Exec=/ {/Exec=schroot -c amd64 -u root -d /home /! s|^Exec=\(.*\)|Exec=schroot -c amd64 -u root -d /home \1|}' "$file"
        done
        find desktop-files -type f -iname "*.desktop" | while read file; do
            dir=$(dirname "$file")
            base=$(basename "$file")
            name="${base%.*}"
            ext="${base##*.}"
            mv "$file" "$dir/${name}-amd64.${ext}"
        done
        desktop-file-install --dir=/usr/share/applications/ desktop-files/*.desktop
        update-desktop-database
        rm -r ./desktop-files
    fi
    shopt -s nullglob
    if dpkg-deb --fsys-tarfile "$DEB_FILENAME" | tar -tf - | grep -q '^\.*/usr/share/icons/'; then
        dpkg-deb --fsys-tarfile "$DEB_FILENAME" | tar -tf - | grep '^\.*/usr/share/icons/.*\.\(png\|svg\|xpm\|jpg\)$' > files-to-extract.txt
        dpkg-deb --fsys-tarfile "$DEB_FILENAME" | tar -xv --strip-components=3 -T files-to-extract.txt
        find icons -type f \( -iname "*.png" -o -iname "*.svg" -o -iname "*.xpm" -o -iname "*.jpg" \) | while read file; do
        dir=$(dirname "$file")
        base=$(basename "$file")
        name="${base%.*}"
        ext="${base##*.}"
        mv "$file" "$dir/${name}-amd64.${ext}"
        done
        rm files-to-extract.txt
        if [ -d ./icons ] && [ "$(ls -A ./icons)" ]; then
            mv ./icons/* /usr/share/icons/
            rm -r ./icons
            gtk-update-icon-cache /usr/share/icons
        fi
    fi
    if dpkg-deb --fsys-tarfile "$DEB_FILENAME" | tar -tf - | grep -q '^\.*/usr/share/pixmaps/'; then
        dpkg-deb --fsys-tarfile "$DEB_FILENAME" | tar -tf - | grep '^\.*/usr/share/pixmaps/.*\.\(png\|svg\|xpm\|jpg\)$' > files-to-extract.txt
        dpkg-deb --fsys-tarfile "$DEB_FILENAME" | tar -xv --strip-components=3 -T files-to-extract.txt
        find pixmaps -type f \( -iname "*.png" -o -iname "*.svg" -o -iname "*.xpm" -o -iname "*.jpg" \) | while read file; do
        dir=$(dirname "$file")
        base=$(basename "$file")
        name="${base%.*}"
        ext="${base##*.}"
        mv "$file" "$dir/${name}-amd64.${ext}"
        done
        rm files-to-extract.txt
        if [ -d ./pixmaps ] && [ "$(ls -A ./pixmaps)" ]; then
            mv ./pixmaps/* /usr/share/pixmaps/
            rm -r ./pixmaps
            gtk-update-icon-cache /usr/share/pixmaps
        fi
    fi
    rm -rf "$CHROOT_DIR/tmp/install-deb/"
    echo "Installation complete."
    exit 0
fi

# .deb file uninstall in chroot
if [[ "${1:-}" == "uninstall-deb" && -n "${2:-}" ]]; then
    DEB_FILE="$2"
    if [[ ! -f "$DEB_FILE" ]]; then
        echo "Error: .deb file not found: $DEB_FILE"
        exit 1
    fi
    echo "Uninstalling package from $DEB_FILE in chroot environment..."
    
    # Extract package name from .deb
    PKG_NAME=$(dpkg-deb -f "$DEB_FILE" Package)
    
    # Remove desktop files
    if dpkg-deb --fsys-tarfile "$DEB_FILE" | tar -tf - | grep -q '^\.*/usr/share/applications/'; then
        desktop_files=$(dpkg-deb --contents "$DEB_FILE" | awk '{print $NF}' | grep '^\.\/usr\/share\/applications\/.*\.desktop$')
        for file in $desktop_files; do
            base_name=$(basename "$file")
            modified_name="${base_name%.*}-amd64.${base_name##*.}"
            rm -f "/usr/share/applications/$modified_name"
        done
        update-desktop-database
    fi
    
    # Remove icons
    for dir_type in icons pixmaps; do
        if dpkg-deb --fsys-tarfile "$DEB_FILE" | tar -tf - | grep -q "^\.*/usr/share/$dir_type/"; then
            icon_files=$(dpkg-deb --contents "$DEB_FILE" | awk '{print $NF}' | grep "\.\/usr\/share\/$dir_type\/.*\.\(png\|svg\|xpm\|jpg\)$")
            for file in $icon_files; do
                base_name=$(basename "$file")
                modified_name="${base_name%.*}-amd64.${base_name##*.}"
                rm -f "/usr/share/$dir_type/$modified_name"
            done
            gtk-update-icon-cache "/usr/share/$dir_type/"
        fi
    done
    
    # Purge package from chroot
    chroot "$CHROOT_DIR" dpkg --purge "$PKG_NAME"
    echo "Uninstallation complete."
    exit 0
fi

echo 'Proceed? Doing so will remove an existing amd64-arm environment, if present. Press ENTER to continue, ^C to cancel.'
read

# Remove existing chroot
# Unmount bind mounts and special filesystems
for mnt in dev/snd dev/shm dev/pts dev/binderfs sys/fs/cgroup etc/resolv.conf tmp/.X11-unix dev proc sys run tmp; do
    umount -l "$CHROOT_DIR/$mnt" &>/dev/null || true
done
# Remove chroot directory
rm -rf "$CHROOT_DIR"
# Remove schroot config
rm -f /etc/schroot/chroot.d/amd64.conf
rm -rf /etc/schroot/amd64
# Remove desktop launcher and launcher script
rm -f /usr/share/applications/amd64.desktop
rm -f /usr/share/applications/*-amd64.desktop
find /usr/share/icons/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
find /usr/share/pixmaps/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
rm -f /usr/bin/amd64
update-desktop-database
gtk-update-icon-cache

# Install dependencies
if ! command -v apt-get &>/dev/null; then
    echo "apt-get not found. Are you on a Debian-based system?"
    exit 1
fi
apt-get update
apt-get install -y qemu-system qemu-user qemu-user-static sudo binfmt-support debootstrap binutils schroot curl

# Setup Debian x86 chroot
DEB_VER="${1:-$DEF_VER}"
# Compose the URL to check
URL="https://ftp.debian.org/debian/dists/$DEB_VER/"
# Use curl to check if the URL exists (HTTP 200)
if curl --head --silent --fail "$URL" > /dev/null; then
    DEB_MIRROR="http://deb.debian.org/debian"
else
    DEB_MIRROR="http://archive.debian.org/debian"
    apt-get install -y debian-archive-keyring
fi
debootstrap --no-check-gpg --foreign --arch amd64 "$DEB_VER" "$CHROOT_DIR" "$DEB_MIRROR"

# Copy qemu binary
if [[ -f /usr/bin/qemu-x86_64-static ]]; then
    cp /usr/bin/qemu-x86_64-static "$CHROOT_DIR/usr/bin/"
elif [[ -f /usr/bin/qemu-amd64-static ]]; then
    cp /usr/bin/qemu-amd64-static "$CHROOT_DIR/usr/bin/"
else
    echo "QEMU static binary not found. Exiting."
    exit 1
fi

# Run second stage of debootstrap
chroot "$CHROOT_DIR" /debootstrap/debootstrap --second-stage

# Update apt inside chroot
chroot "$CHROOT_DIR" apt-get update

# Setup locale
SYSTEM_LOCALE="${LC_ALL:-${LANG:-en_US.UTF-8}}"
chroot "$CHROOT_DIR" bash -c "apt-get install locales -y; if grep -q '^# *$SYSTEM_LOCALE UTF-8' /etc/locale.gen; then sed -i '/^# *$SYSTEM_LOCALE UTF-8/ s/^# *//' /etc/locale.gen; fi; locale-gen; update-locale LANG=$SYSTEM_LOCALE"

# create schroot config
USER="${SUDO_USER:-$(whoami)}"
cat <<EOF > /etc/schroot/chroot.d/amd64.conf
[amd64]
description=Debian amd64 chroot
directory=/amd64
users=$USER
root-users=$USER
type=directory
setup.fstab=amd64/fstab
EOF
mkdir -p /etc/schroot/amd64
cat <<EOF > /etc/schroot/amd64/fstab
/proc           /proc           none    rw,bind         0       0
/sys            /sys            none    rw,bind         0       0
/dev            /dev            none    rw,bind         0       0
/dev/pts        /dev/pts        none    rw,bind         0       0
/dev/shm        /dev/shm        none    rw,bind         0       0
/dev/snd        /dev/snd        none    rw,bind         0       0
/dev/binderfs   /dev/binderfs   none    rw,bind         0       0
/tmp            /tmp            none    rw,bind         0       0
/tmp/.X11-unix  /tmp/.X11-unix  none    rw,bind         0       0
/etc/resolv.conf /etc/resolv.conf none  rw,bind         0       0
/run            /run            none    rw,bind         0       0
/sys/fs/cgroup  /sys/fs/cgroup  none    rw,bind         0       0
EOF
chown root:root /etc/schroot/chroot.d/amd64.conf
chmod 644 /etc/schroot/chroot.d/amd64.conf

# Create desktop launcher
mkdir -p /usr/share/applications
cat <<'EOF' > /usr/share/applications/amd64.desktop
[Desktop Entry]
Name=Terminal (amd64)
Type=Application
Comment=Launch amd64-arm environment
Exec=x-terminal-emulator --title="Terminal amd64-arm" -e "/usr/bin/amd64"
Icon=terminal
Terminal=false
Categories=Utility;
EOF

# Create launcher script
cat <<'EOF' > /usr/bin/amd64
#!/bin/bash
exec schroot -c amd64 -u root -d /home /bin/bash
EOF
chmod 755 /usr/bin/amd64

echo 'Reboot? Required for amd64-arm to work properly. Press ENTER to reboot, ^C to cancel.'
read
reboot