#!/bin/bash

set -euo pipefail

DEF_VER=stretch
CHROOT_DIR=/amd64

# Check if root
if [[ $(id -u) -ne 0 ]]; then
    echo 'Requires root. Exiting...'
    exit 1
fi

echo 'Proceed? Doing so will remove an existing amd64-arm environment, if present. Press ENTER to continue, ^C to cancel.'
read

# Remove existing chroot
for mnt in sys proc dev/pts dev/shm dev; do
    umount -l "$CHROOT_DIR/$mnt" &>/dev/null || true
done
rm -rf "$CHROOT_DIR"

# Install dependencies
if ! command -v apt-get &>/dev/null; then
    echo "apt-get not found. Are you on a Debian-based system?"
    exit 1
fi
apt-get update
apt-get install -y qemu-system qemu-user qemu-user-static sudo binfmt-support debootstrap binutils lxterminal schroot

# Setup Debian x86 chroot
DEB_VER="${1:-$DEF_VER}"
# Compose the URL to check
URL="https://ftp.debian.org/debian/dists/$DEB_VER/"
# Use curl to check if the URL exists (HTTP 200)
if curl --head --silent --fail "$URL" > /dev/null; then
    DEB_MIRROR="http://deb.debian.org/debian"
else
    DEB_MIRROR="http://archive.debian.org/debian"
    apt-get install -y debian-archive-keyring
fi
debootstrap --no-check-gpg --foreign --arch amd64 "$DEB_VER" "$CHROOT_DIR" "DEB_MIRROR"

# Create setup_amd64 script
cat <<'EOF' > /usr/bin/setup_amd64
#!/bin/bash
mountpoint -q /amd64/sys || mount -t sysfs sys /amd64/sys/
mountpoint -q /amd64/proc || mount -t proc proc /amd64/proc/
mount --bind /dev /amd64/dev/
mount --bind /dev/pts /amd64/dev/pts/
mount --bind /dev/shm /amd64/dev/shm/
mount --bind /etc/resolv.conf /amd64/etc/resolv.conf
EOF
chmod 755 /usr/bin/setup_amd64

# Create systemd service
cat <<'EOF' > /etc/systemd/system/setup_amd64.service
[Unit]
Description=Service to setup amd64 chroot environment

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/bin/setup_amd64

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable setup_amd64
systemctl start setup_amd64

# Copy qemu binary
if [[ -f /usr/bin/qemu-x86_64-static ]]; then
    cp /usr/bin/qemu-x86_64-static "$CHROOT_DIR/usr/bin/"
elif [[ -f /usr/bin/qemu-amd64-static ]]; then
    cp /usr/bin/qemu-amd64-static "$CHROOT_DIR/usr/bin/"
else
    echo "QEMU static binary not found. Exiting."
    exit 1
fi

# Run second stage of debootstrap
chroot "$CHROOT_DIR" /debootstrap/debootstrap --second-stage

# Update apt inside chroot
chroot "$CHROOT_DIR" apt-get update

# Setup locale
chroot "$CHROOT_DIR" bash -c "apt-get install locales -y && sed -i '/en_US.UTF-8 UTF-8/ s/# *//' /etc/locale.gen && locale-gen && update-locale LANG=en_US.UTF-8"

# create schroot config
cat <<EOF > /etc/schroot/chroot.d/amd64.conf
[amd64]
description=Debian amd64 chroot
directory=/amd64
users=$(whoami)
root-users=$(whoami)
type=directory
EOF
chown root:root /etc/schroot/chroot.d/amd64.conf
chmod 644 /etc/schroot/chroot.d/amd64.conf

# Create desktop launcher
mkdir -p /usr/share/applications/
cat <<'EOF' > /usr/share/applications/amd64.desktop
[Desktop Entry]
Name=amd64-arm - Terminal
Type=Application
Comment=Launch amd64-arm environment
Exec=lxterminal --title="amd64-arm - Terminal" -e "schroot -c amd64 /bin/bash"
Icon=terminal
Terminal=false
Categories=Utility;
EOF

# Create launcher script
cat <<'EOF' > /usr/bin/amd64
#!/bin/bash
schroot -c amd64 /bin/bash
EOF
chmod 755 /usr/bin/amd64

echo 'Reboot? Required for amd64-arm to work properly. Press ENTER to reboot, ^C to cancel.'
read
reboot
