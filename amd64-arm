#!/bin/bash

: << 'COMMENT'
setup commands in terminal:

# install debian bookworm
chmod +x <path_to_amd64-arm>
sudo bash <path_to_amd64-arm>

# install (choose debian version)
chmod +x <path_to_amd64-arm>
sudo bash <path_to_amd64-arm> <debian_codename>

# uninstall
chmod +x <path_to_amd64-arm>
sudo bash <path_to_amd64-arm> uninstall

# schroot environment install .deb file
chmod +x <path_to_amd64-arm>
bash <path_to_amd64-arm> install-deb <path_to_deb_file>

# schroot environment uninstall .deb file
chmod +x <path_to_amd64-arm>
bash <path_to_amd64-arm> uninstall-deb <path_to_deb_file>

usage:

# access chroot terminal (root)
amd64

# chroot terminal as root
schroot -c amd64 -u root -d /home

# chroot terminal as user
schroot -c amd64 -u $USER -d /home

# exit chroot terminal
exit

# run amd64.desktop
Menu > Accessories > Terminal (amd64)

win64/Win32 apps on arm64 Linux
https://github.com/AndreRH/hangover
COMMENT

set -euo pipefail

DEF_VER=bookworm
CHROOT_NAME="amd64"
CHROOT_DIR="/amd64"

# Check for root (NOT for install-deb/uninstall-deb)
if [[ "${1:-}" != "install-deb" && "${1:-}" != "uninstall-deb" ]]; then
    if [[ $(id -u) -ne 0 ]]; then
        echo 'Requires root. Exiting...'
        exit 1
    fi
fi

if [[ "${1:-}" == "uninstall" ]]; then
    echo "Uninstalling amd64 chroot environment..."

    # Unmount bind mounts and special filesystems
    for mnt in dev/snd dev/shm dev/pts dev/binderfs etc/resolv.conf sys/fs/cgroup tmp/.X11-unix dev proc sys run tmp; do
        umount -l "$CHROOT_DIR/$mnt" &>/dev/null || true
    done

    # Remove chroot directory
    rm -rf "$CHROOT_DIR"

    # Remove schroot config
    rm -f /etc/schroot/chroot.d/amd64.conf
    rm -rf /etc/schroot/amd64

    # Remove desktop launcher and launcher script
    rm -f /usr/share/applications/amd64.desktop
    rm -f /usr/share/applications/*-amd64.desktop
    find /usr/share/icons/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
    find /usr/share/pixmaps/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
    rm -f /usr/bin/amd64
    update-desktop-database
    gtk-update-icon-cache
    echo "Uninstall complete."
    exit 0
fi

# .deb file installation in schroot
if [[ "${1:-}" == "install-deb" && -n "${2:-}" ]]; then
    # --- Validation Section ---
    DEB_FILE="$2"
    [[ -f "$DEB_FILE" ]] || { echo "Error: .deb file not found: $DEB_FILE"; exit 1; }

    # --- Setup Section ---
    echo "Installing $DEB_FILE in schroot environment..."
    WORK_DIR="/tmp/install-deb-$(date +%s)"
    schroot -c "$CHROOT_NAME" -u root -d /home -- mkdir -p "$WORK_DIR"
    cp "$DEB_FILE" "${CHROOT_DIR}/tmp/"
    schroot -c "$CHROOT_NAME" -u root -d /home -- mv "/tmp/$DEB_FILE" "${WORK_DIR}/"
    DEB_FILENAME=$(basename "$DEB_FILE")

    # --- Installation Section ---
    (
        set -eo pipefail
        schroot -c "$CHROOT_NAME" -u root -d /home -- apt-get update
        schroot -c "$CHROOT_NAME" -u root -d /home -- apt install -y "${WORK_DIR}/${DEB_FILENAME}"
        schroot -c "$CHROOT_NAME" -u root -d /home -- apt --fix-broken install -y
    ) || { echo "Installation failed"; schroot -c "$CHROOT_NAME" -u root -d /home -- rm -rf "$WORK_DIR"; exit 1; }

    # --- Desktop File Processing ---
    process_desktop_files() {
        local desktop_files
        desktop_files=$(dpkg-deb --contents "$DEB_FILE" | awk -F' ' '{print $NF}' | grep -E '\./usr/share/applications/.*\.desktop$')
        
        [[ -n "$desktop_files" ]] || return 0
        
        mkdir -p "$HOME/host-desktop-files/"
        dpkg-deb --fsys-tarfile "$DEB_FILE" | tar xvf - --strip-components=3 -C "$HOME/host-desktop-files" $(echo "$desktop_files" | sed 's/^\.//') 2>/dev/null
        
        for file in "$HOME"/host-desktop-files/*.desktop; do
            [ -f "$file" ] || continue
            # Modify for schroot execution
            sed -i -r \
                -e '/^Name=/ s/$/ (amd64)/' \
                -e '/^Icon=/ s/$/-amd64/' \
                -e '/^Exec=/ s|^Exec=(.*)|Exec=schroot -c '"${CHROOT_NAME}"' -d /home \1|' \
                "$file"
            
            if desktop-file-validate "$file"; then
                desktop-file-install --dir="$HOME/.local/share/applications/" "$file"
            else
                echo "Invalid desktop file: $file" >&2
            fi
        done
        update-desktop-database "$HOME/.local/share/applications/"
    }

    # --- Icon Processing ---
    process_icons() {
        local icon_dir=$1
        local files_to_extract
        
        files_to_extract=$(dpkg-deb --fsys-tarfile "$DEB_FILE" | tar -tf - | grep -E "\./${icon_dir}/.*\.(png|svg|xpm|jpg)$")
        
        [[ -n "$files_to_extract" ]] || return 0
        
        mkdir -p "$HOME/extracted-icons/"
        dpkg-deb --fsys-tarfile "$DEB_FILE" | tar xvf - --strip-components=3 -C "$HOME/extracted-icons" $(echo "$files_to_extract" | sed 's/^\.//') 2>/dev/null
        
        find "$HOME"/extracted-icons -type f | while read -r file; do
            new_file="${file%.*}-amd64.${file##*.}"
            install -Dm644 "$file" "$HOME/.local/share/icons/${icon_dir}/$new_file"
        done
        
        gtk-update-icon-cache "$HOME/.local/share/icons/${icon_dir}/"
    }

    # --- Execution Section ---
    (
        cd "${CHROOT_DIR}${WORK_DIR}" || exit 1
        process_desktop_files
        process_icons "icons"
        process_icons "pixmaps"
    )

    # --- Cleanup ---
    schroot -c "$CHROOT_NAME" -u root -d /home -- rm -rf "$WORK_DIR"
    rm -rf "$HOME/host-desktop-files" "$HOME/extracted-icons"
    echo "Installation complete."
    exit 0
fi

# .deb file uninstall in schroot
if [[ "${1:-}" == "uninstall-deb" && -n "${2:-}" ]]; then
    # --- Validation Section ---
    DEB_FILE="$2"
    [[ -f "$DEB_FILE" ]] || { echo "Error: .deb file not found: $DEB_FILE" >&2; exit 1; }

    # --- Package Extraction ---
    PKG_NAME=$(dpkg-deb -f "$DEB_FILE" Package 2>/dev/null) || {
        echo "Error: Failed to extract package name from $DEB_FILE" >&2
        exit 1
    }

    echo "Uninstalling $PKG_NAME from schroot environment..."

    # --- Desktop File Removal ---
    remove_desktop_files() {
        local desktop_files
        desktop_files=$(dpkg-deb --showformat='${Files}' -W "$DEB_FILE" | 
                        grep -o '/usr/share/applications/[^ ]*\.desktop')
        
        [[ -z "$desktop_files" ]] && return 0

        while IFS= read -r -d '' file; do
            base_name="${file##*/}"
            host_file="$HOME/.local/share/applications/${base_name%.*}-amd64.desktop"
            [[ -f "$host_file" ]] && rm -v "$host_file"
        done < <(echo "$desktop_files" | tr '\n' '\0')

        update-desktop-database "$HOME/.local/share/applications/"
    }

    # --- Icon Removal ---
    remove_icons() {
        local icon_dir="$1"
        local icon_files
        
        icon_files=$(dpkg-deb --showformat='${Files}' -W "$DEB_FILE" | 
                    grep -E -o "/usr/share/${icon_dir}/[^ ]*\\.(png|svg|xpm|jpg)")
        
        [[ -z "$icon_files" ]] && return 0

        while IFS= read -r -d '' file; do
            base_name="${file##*/}"
            host_file="$HOME/.local/share/icons/${icon_dir}/${base_name%.*}-amd64.${base_name##*.}"
            [[ -f "$host_file" ]] && rm -v "$host_file"
        done < <(echo "$icon_files" | tr '\n' '\0')

        gtk-update-icon-cache "$HOME/.local/share/icons/${icon_dir}/"
    }

    # --- Execution Section ---
    (
        set -eo pipefail
        remove_desktop_files
        remove_icons "icons"
        remove_icons "pixmaps"
    ) || echo "Warning: Some cleanup operations failed" >&2

    # --- Package Purge ---
    if schroot -c "$CHROOT_NAME" -u root -d /home -- dpkg-query -W "$PKG_NAME" >/dev/null 2>&1; then
        schroot -c "$CHROOT_NAME" -u root -d /home -- dpkg --purge "$PKG_NAME" || {
            echo "Error: Failed to purge package $PKG_NAME" >&2
            exit 1
        }
    else
        echo "Warning: Package $PKG_NAME not installed in schroot" >&2
    fi

    echo "Uninstallation complete."
    exit 0
fi

echo 'Proceed? Doing so will remove an existing amd64-arm environment, if present. Press ENTER to continue, ^C to cancel.'
read

# Remove existing chroot
# Unmount bind mounts and special filesystems
for mnt in dev/snd dev/shm dev/pts dev/binderfs sys/fs/cgroup etc/resolv.conf tmp/.X11-unix dev proc sys run tmp; do
    umount -l "$CHROOT_DIR/$mnt" &>/dev/null || true
done
# Remove chroot directory
rm -rf "$CHROOT_DIR"
# Remove schroot config
rm -f /etc/schroot/chroot.d/amd64.conf
rm -rf /etc/schroot/amd64
# Remove desktop launcher and launcher script
rm -f /usr/share/applications/amd64.desktop
rm -f /usr/share/applications/*-amd64.desktop
find /usr/share/icons/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
find /usr/share/pixmaps/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
rm -f /usr/bin/amd64
update-desktop-database
gtk-update-icon-cache

# Install dependencies
if ! command -v apt-get &>/dev/null; then
    echo "apt-get not found. Are you on a Debian-based system?"
    exit 1
fi
apt-get update
apt-get install -y qemu-system qemu-user qemu-user-static sudo binfmt-support debootstrap binutils schroot curl

# Setup Debian x86 chroot
DEB_VER="${1:-$DEF_VER}"
# Compose the URL to check
URL="https://ftp.debian.org/debian/dists/$DEB_VER/"
# Use curl to check if the URL exists (HTTP 200)
if curl --head --silent --fail "$URL" > /dev/null; then
    DEB_MIRROR="http://deb.debian.org/debian"
else
    DEB_MIRROR="http://archive.debian.org/debian"
    apt-get install -y debian-archive-keyring
fi
debootstrap --no-check-gpg --foreign --arch amd64 "$DEB_VER" "$CHROOT_DIR" "$DEB_MIRROR"

# Copy qemu binary
if [[ -f /usr/bin/qemu-x86_64-static ]]; then
    cp /usr/bin/qemu-x86_64-static "$CHROOT_DIR/usr/bin/"
elif [[ -f /usr/bin/qemu-amd64-static ]]; then
    cp /usr/bin/qemu-amd64-static "$CHROOT_DIR/usr/bin/"
else
    echo "QEMU static binary not found. Exiting."
    exit 1
fi

# Run second stage of debootstrap
chroot "$CHROOT_DIR" /debootstrap/debootstrap --second-stage

# Update apt inside chroot
chroot "$CHROOT_DIR" apt-get update

# Setup locale
SYSTEM_LOCALE="${LC_ALL:-${LANG:-en_US.UTF-8}}"
chroot "$CHROOT_DIR" bash -c "apt-get install locales -y; if grep -q '^# *$SYSTEM_LOCALE UTF-8' /etc/locale.gen; then sed -i '/^# *$SYSTEM_LOCALE UTF-8/ s/^# *//' /etc/locale.gen; fi; locale-gen; update-locale LANG=$SYSTEM_LOCALE"

# create schroot config
USER="${SUDO_USER:-$(whoami)}"
cat <<EOF > /etc/schroot/chroot.d/amd64.conf
[amd64]
description=Debian amd64 chroot
directory=/amd64
users=$USER
root-users=$USER
type=directory
setup.fstab=amd64/fstab
EOF
mkdir -p /etc/schroot/amd64
cat <<EOF > /etc/schroot/amd64/fstab
/proc           /proc           none    rw,bind         0       0
/sys            /sys            none    rw,bind         0       0
/dev            /dev            none    rw,bind         0       0
/dev/pts        /dev/pts        none    rw,bind         0       0
/dev/shm        /dev/shm        none    rw,bind         0       0
/dev/snd        /dev/snd        none    rw,bind         0       0
/dev/binderfs   /dev/binderfs   none    rw,bind         0       0
/tmp            /tmp            none    rw,bind         0       0
/tmp/.X11-unix  /tmp/.X11-unix  none    rw,bind         0       0
/etc/resolv.conf /etc/resolv.conf none  rw,bind         0       0
/run            /run            none    rw,bind         0       0
/sys/fs/cgroup  /sys/fs/cgroup  none    rw,bind         0       0
EOF
chown root:root /etc/schroot/chroot.d/amd64.conf
chmod 644 /etc/schroot/chroot.d/amd64.conf

# Create desktop launcher
mkdir -p /usr/share/applications
cat <<'EOF' > /usr/share/applications/amd64.desktop
[Desktop Entry]
Name=Terminal (amd64)
Type=Application
Comment=Launch amd64-arm environment
Exec=x-terminal-emulator --title="Terminal amd64-arm" -e "/usr/bin/amd64"
Icon=terminal
Terminal=false
Categories=Utility;
EOF

# Create launcher script
cat <<'EOF' > /usr/bin/amd64
#!/bin/bash
exec schroot -c amd64 -u root -d /home /bin/bash
EOF
chmod 755 /usr/bin/amd64

echo 'Reboot? Required for amd64-arm to work properly. Press ENTER to reboot, ^C to cancel.'
read
reboot