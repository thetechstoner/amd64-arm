#!/bin/bash

: << 'COMMENT'
user-mode emulation (schroot/chroot/proot)
Emulation: User-mode (qemu-x86_64-static)
Filesystem: Direct host bind mounts
Networking: Shared host network stack
Performance: Moderate (CPU emulation)
Security: Potential breakout risks
should not be relied upon for containing untrusted code

schroot will not work for complex apps
chromium/electron based apps wont work

to run more apps use:
kvm-hosted mode (qemu handles device emulation and kvm accelerates cpu execution)
Emulation: Full system emulation with KVM
Filesystem: Isolated virtual disk
Networking: Virtual bridge (virbr0)
Performance: Near-native (hardware virt)
Security: Strong process isolation

schroot setup commands in terminal:

# install debian bookworm
chmod +x <path_to_amd64-arm>
sudo bash <path_to_amd64-arm>

# install (choose debian version)
chmod +x <path_to_amd64-arm>
sudo bash <path_to_amd64-arm> <debian_codename>

# uninstall
chmod +x <path_to_amd64-arm>
sudo bash <path_to_amd64-arm> uninstall

# schroot environment install .deb file
chmod +x <path_to_amd64-arm>
bash <path_to_amd64-arm> install-deb <path_to_deb_file>

# schroot environment uninstall .deb file
chmod +x <path_to_amd64-arm>
bash <path_to_amd64-arm> uninstall-deb <path_to_deb_file>

# schroot environment integrate desktop and icon files in system (remove unused files)
chmod +x <path_to_amd64-arm>
bash <path_to_amd64-arm> integrate-system

usage:

# access chroot terminal (root)
amd64

# chroot terminal as root
schroot -c amd64 -u root -d /home

# chroot terminal as user
schroot -c amd64 -u $USER -d /home

# exit chroot terminal
exit

# run amd64.desktop
Menu > Accessories > Terminal (amd64)

win64/Win32 apps on arm64 Linux
https://github.com/AndreRH/hangover
COMMENT

set -euo pipefail

DEF_VER=bookworm
CHROOT_NAME="amd64"
CHROOT_DIR="/amd64"

# Check for root (NOT install-deb,uninstall-deb,integrate-system)
if [[ "${1:-}" != "install-deb" && "${1:-}" != "uninstall-deb" && "${1:-}" != "integrate-system" ]]; then
    if [[ $(id -u) -ne 0 ]]; then
        echo 'Requires root. Exiting...'
        exit 1
    fi
fi

if [[ "${1:-}" == "uninstall" ]]; then
    echo "Uninstalling amd64 chroot environment..."

    # Unmount bind mounts and special filesystems
    for mnt in dev/snd dev/shm dev/pts dev/binderfs etc/resolv.conf sys/fs/cgroup tmp/.X11-unix run/dbus dev proc sys run tmp; do
        umount -l "$CHROOT_DIR/$mnt" &>/dev/null || true
    done

    # Remove chroot directory
    rm -rf "$CHROOT_DIR"

    # Remove schroot config
    rm -f /etc/schroot/chroot.d/amd64.conf
    rm -rf /etc/schroot/amd64

    # Remove desktop launcher and launcher script
    rm -f ~/.local/share/applications/amd64.desktop
    rm -f ~/.local/share/applications/*-amd64.desktop
    find ~/.local/share/icons/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
    find ~/.local/share/pixmaps/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
    rm -f /usr/bin/amd64
    update-desktop-database
    gtk-update-icon-cache
    echo "Uninstall complete."
    exit 0
fi

# schroot environment integrate desktop and icon files in system (remove unused files)
if [[ "${1:-}" == "integrate-system" ]]; then
  SCHROOT_PREFIX="/amd64"
  USER_APP_DIR="$HOME/.local/share/applications"
  USER_ICON_DIR="$HOME/.local/share/icons"
  
  mkdir -p "$USER_APP_DIR" "$USER_ICON_DIR"

  rm -f ~/.local/share/applications/*-amd64.desktop
  find ~/.local/share/icons/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
  find ~/.local/share/pixmaps/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete

  echo "Copying and modifying .desktop files..."

  for file in "$SCHROOT_PREFIX/usr/share/applications/"*.desktop; do
    [ -f "$file" ] || continue
    base=$(basename "$file" .desktop)
    target="$USER_APP_DIR/${base}-amd64.desktop"
    cp "$file" "$target"

    # Get icon name (may be theme icon, so no extension)
    orig_icon=$(grep -E '^Icon=' "$file" | head -1 | cut -d= -f2 | tr -d '[:space:]')
    [ -z "$orig_icon" ] && orig_icon="$base"

    # Find all icon files matching the icon name in supported formats
    mapfile -t icon_files < <(find "$SCHROOT_PREFIX/usr/share/icons" "$SCHROOT_PREFIX/usr/share/pixmaps" \
      -type f \( -iname "${orig_icon}.png" -o -iname "${orig_icon}.svg" -o -iname "${orig_icon}.xpm" -o -iname "${orig_icon}.jpg" \) 2>/dev/null)

    # Track if we found at least one icon
    found_any_icon=false

    for icon_file in "${icon_files[@]}"; do
      found_any_icon=true
      # Remove SCHROOT_PREFIX from path
      icon_relpath="${icon_file#$SCHROOT_PREFIX/}"

      # Only preserve path under hicolor or pixmaps (as appropriate)
      if [[ "$icon_relpath" == usr/share/icons/* ]]; then
        icon_relpath="${icon_relpath#usr/share/icons/}"
      elif [[ "$icon_relpath" == usr/share/pixmaps/* ]]; then
        icon_relpath="pixmaps/${icon_relpath#usr/share/pixmaps/}"
      else
        # If not matching, skip
        continue
      fi

      # Build new filename with -amd64 suffix
      filename=$(basename "$icon_relpath")
      extension="${filename##*.}"
      base_icon="${filename%.*}"
      new_filename="${base_icon}-amd64.${extension}"
      icon_target="$USER_ICON_DIR/$(dirname "$icon_relpath")/$new_filename"

      # Ensure target directory exists and copy
      mkdir -p "$(dirname "$icon_target")"
      cp "$icon_file" "$icon_target"
    done

    # For the .desktop Icon= field, just use the base icon name with -amd64
    icon_for_desktop="${orig_icon}-amd64"

    # Extract original Exec line (without 'Exec=')
    orig_exec=$(grep -E '^Exec=' "$file" | head -1 | cut -d= -f2-)

    # Build new Exec line
    new_exec="schroot -c amd64 -u root -d /home -- /bin/bash -c \"source ~/.bashrc; $orig_exec --no-sandbox --disable-gpu\""

    # Modify .desktop file
    sed -i \
      -e '/^Name=/ s/$/ (amd64)/' \
      -e '/^Exec=/ c\Exec='"$new_exec" \
      -e '/^Icon=/ s|=.*|='"$icon_for_desktop"'|' \
      "$target"
  done

  echo "Updating desktop and icon caches..."
  update-desktop-database "$USER_APP_DIR"
  gtk-update-icon-cache "$USER_ICON_DIR" || true

  echo "Integration complete."
  exit 0
fi

# .deb file installation in schroot
if [[ "${1:-}" == "install-deb" && -n "${2:-}" ]]; then
    # --- Validation Section ---
    DEB_FILE="$2"
    [[ -f "$DEB_FILE" ]] || { echo "Error: .deb file not found: $DEB_FILE"; exit 1; }

    # --- Setup Section ---
    echo "Installing $DEB_FILE in schroot environment..."
    WORK_DIR="/tmp/install-deb-$(date +%s)"
    schroot -c "$CHROOT_NAME" -u root -d /home -- mkdir -p "$WORK_DIR"
    cp "$DEB_FILE" "${CHROOT_DIR}/tmp/"
    schroot -c "$CHROOT_NAME" -u root -d /home -- mv "/tmp/$DEB_FILE" "${WORK_DIR}/"
    DEB_FILENAME=$(basename "$DEB_FILE")

    # --- Installation Section ---
    (
        set -eo pipefail
        schroot -c "$CHROOT_NAME" -u root -d /home -- apt-get update
        schroot -c "$CHROOT_NAME" -u root -d /home -- apt install -y "${WORK_DIR}/${DEB_FILENAME}"
        schroot -c "$CHROOT_NAME" -u root -d /home -- apt --fix-broken install -y
    ) || { echo "Installation failed"; schroot -c "$CHROOT_NAME" -u root -d /home -- rm -rf "$WORK_DIR"; exit 1; }

    # --- Cleanup ---
    schroot -c "$CHROOT_NAME" -u root -d /home -- rm -rf "$WORK_DIR"
    echo "Installation complete."
    exit 0
fi

# .deb file uninstall in schroot
if [[ "${1:-}" == "uninstall-deb" && -n "${2:-}" ]]; then
    # --- Validation Section ---
    DEB_FILE="$2"
    [[ -f "$DEB_FILE" ]] || { echo "Error: .deb file not found: $DEB_FILE" >&2; exit 1; }

    # --- Package Extraction ---
    PKG_NAME=$(dpkg-deb -f "$DEB_FILE" Package 2>/dev/null) || {
        echo "Error: Failed to extract package name from $DEB_FILE" >&2
        exit 1
    }

    echo "Uninstalling $PKG_NAME from schroot environment..."

    # --- Package Purge ---
    if schroot -c "$CHROOT_NAME" -u root -d /home -- dpkg-query -W "$PKG_NAME" >/dev/null 2>&1; then
        schroot -c "$CHROOT_NAME" -u root -d /home -- dpkg --purge "$PKG_NAME" || {
            echo "Error: Failed to purge package $PKG_NAME" >&2
            exit 1
        }
    else
        echo "Warning: Package $PKG_NAME not installed in schroot" >&2
    fi

    echo "Uninstallation complete."
    exit 0
fi

echo 'Proceed? Doing so will remove an existing amd64-arm environment, if present. Press ENTER to continue, ^C to cancel.'
read

# Remove existing chroot
# Unmount bind mounts and special filesystems
for mnt in dev/snd dev/shm dev/pts dev/binderfs sys/fs/cgroup etc/resolv.conf tmp/.X11-unix run/dbus dev proc sys run tmp; do
    umount -l "$CHROOT_DIR/$mnt" &>/dev/null || true
done
# Remove chroot directory
rm -rf "$CHROOT_DIR"
# Remove schroot config
rm -f /etc/schroot/chroot.d/amd64.conf
rm -rf /etc/schroot/amd64
# Remove desktop launcher and launcher script
rm -f ~/.local/share/applications/amd64.desktop
rm -f ~/.local/share/applications/*-amd64.desktop
find ~/.local/share/icons/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
find ~/.local/share/pixmaps/ -type f \( -iname '*-amd64.png' -o -iname '*-amd64.svg' -o -iname '*-amd64.xpm' -o -iname '*-amd64.jpg' \) -delete
rm -f /usr/bin/amd64
update-desktop-database
gtk-update-icon-cache

# Install dependencies
if ! command -v apt-get &>/dev/null; then
    echo "apt-get not found. Are you on a Debian-based system?"
    exit 1
fi
apt-get update
apt-get install -y qemu-system qemu-user qemu-user-static sudo binfmt-support debootstrap binutils schroot curl libasound2

# Setup Debian x86 chroot
DEB_VER="${1:-$DEF_VER}"
# Compose the URL to check
URL="https://ftp.debian.org/debian/dists/$DEB_VER/"
# Use curl to check if the URL exists (HTTP 200)
if curl --head --silent --fail "$URL" > /dev/null; then
    DEB_MIRROR="http://deb.debian.org/debian"
else
    DEB_MIRROR="http://archive.debian.org/debian"
    apt-get install -y debian-archive-keyring
fi
debootstrap --no-check-gpg --foreign --arch amd64 "$DEB_VER" "$CHROOT_DIR" "$DEB_MIRROR"

# Copy qemu binary
if [[ -f /usr/bin/qemu-x86_64-static ]]; then
    cp /usr/bin/qemu-x86_64-static "$CHROOT_DIR/usr/bin/"
elif [[ -f /usr/bin/qemu-amd64-static ]]; then
    cp /usr/bin/qemu-amd64-static "$CHROOT_DIR/usr/bin/"
else
    echo "QEMU static binary not found. Exiting."
    exit 1
fi

# Run second stage of debootstrap
chroot "$CHROOT_DIR" /debootstrap/debootstrap --second-stage

# Update apt inside chroot
chroot "$CHROOT_DIR" apt-get update

# Setup locale
set_or_update_chroot_bashrc_variable() {
    # Usage: set_or_update_chroot_bashrc_variable <VARIABLE_NAME> <VALUE> [CHROOT_DIR]
    if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
        >&2 echo "Usage: set_or_update_chroot_bashrc_variable <VARIABLE_NAME> <VALUE> [CHROOT_DIR]"
        return 1
    fi

    local var_name="$1"
    local value="$2"
    local chroot_dir="${3:-/amd64}"
    local bashrc_file="${chroot_dir}/root/.bashrc"
    local temp_file="${bashrc_file}.tmp"

    # Ensure the .bashrc file exists
    if [ ! -f "$bashrc_file" ]; then
        touch "$bashrc_file"
    fi

    # Escape slashes and special chars in value for safe replacement
    local escaped_value
    escaped_value=$(printf '%s\n' "$value" | sed -e 's/[\/&]/\\&/g')

    # Update or add the export line for the variable
    if grep -q "^export ${var_name}=" "$bashrc_file"; then
        # Variable exists, update its value using sed for simplicity
        sed -i "s/^export ${var_name}=.*/export ${var_name}='${escaped_value}'/" "$bashrc_file"
    else
        # Variable doesn't exist, append it
        echo "export ${var_name}='${value}'" >> "$bashrc_file"
    fi
}
# Determine system locale, fallback to en_US.UTF-8 if not set
SYSTEM_LOCALE="${LC_ALL:-${LANG:-en_US.UTF-8}}"
# Set LANG and LC_ALL in the chroot's .bashrc
set_or_update_chroot_bashrc_variable "LANG" "$SYSTEM_LOCALE" "$CHROOT_DIR"
set_or_update_chroot_bashrc_variable "LC_ALL" "$SYSTEM_LOCALE" "$CHROOT_DIR"
set_or_update_chroot_bashrc_variable "DISPLAY" ":0" "$CHROOT_DIR"
set_or_update_chroot_bashrc_variable "LIBGL_ALWAYS_SOFTWARE" "1" "$CHROOT_DIR"
# Generate the locale inside the chroot environment
chroot "$CHROOT_DIR" bash -c "locale-gen '$SYSTEM_LOCALE'"
# update the locale environment immediately inside the chroot
chroot "$CHROOT_DIR" bash -c "update-locale LANG='$SYSTEM_LOCALE' LC_ALL='$SYSTEM_LOCALE'"

# Install Mesa software rendering fallback
chroot "$CHROOT_DIR" bash -c "apt-get install -y mesa-utils libgl1-mesa-glx"

# Install for hardware acceleration (if supported)
chroot "$CHROOT_DIR" bash -c "apt-get install -y libgl1-mesa-dri"

# fix X11 server no authorization protocol specified
bashrc_manage_line() {
    # Usage:
    #   bashrc_manage_line add    "line of text"
    #   bashrc_manage_line remove "line of text"
    local action="$1"
    local line="$2"
    local bashrc="$HOME/.bashrc"

    if [[ -z "$action" || -z "$line" ]]; then
        echo "Usage: bashrc_manage_line <add|remove> \"line of text\""
        return 1
    fi

    case "$action" in
        add)
            if ! grep -Fxq "$line" "$bashrc"; then
                echo "$line" >> "$bashrc"
            fi
            ;;
        remove)
            # Remove all exact matches of the line
            grep -Fxv "$line" "$bashrc" > "${bashrc}.tmp" && mv "${bashrc}.tmp" "$bashrc"
            ;;
        *)
            echo "Unknown action: $action"
            echo "Usage: bashrc_manage_line <add|remove> \"line of text\""
            return 1
            ;;
    esac
}
bashrc_manage_line add "xhost si:localuser:root >/dev/null 2>&1"

# create schroot config
USER="${SUDO_USER:-$(whoami)}"
cat <<EOF > /etc/schroot/chroot.d/amd64.conf
[amd64]
description=Debian amd64 chroot
directory=/amd64
users=$USER
root-users=$USER
type=directory
setup.fstab=amd64/fstab
EOF
mkdir -p /etc/schroot/amd64
cat <<EOF > /etc/schroot/amd64/fstab
/proc           /proc           none    rw,bind         0       0
/sys            /sys            none    rw,bind         0       0
/dev            /dev            none    rw,bind         0       0
/dev/pts        /dev/pts        none    rw,bind         0       0
/dev/shm        /dev/shm        none    rw,bind         0       0
/dev/snd        /dev/snd        none    rw,bind         0       0
/dev/binderfs   /dev/binderfs   none    rw,bind         0       0
/tmp            /tmp            none    rw,bind         0       0
/tmp/.X11-unix  /tmp/.X11-unix  none    rw,bind         0       0
/etc/resolv.conf /etc/resolv.conf none  rw,bind         0       0
/run            /run            none    rw,bind         0       0
/run/dbus       /run/dbus       none    rw,bind         0       0
/sys/fs/cgroup  /sys/fs/cgroup  none    rw,bind         0       0
EOF
chown root:root /etc/schroot/chroot.d/amd64.conf
chmod 644 /etc/schroot/chroot.d/amd64.conf

# Create desktop launcher
mkdir -p ~/.local/share/applications ~/.local/share/icons ~/.local/share/pixmaps
cat <<'EOF' > ~/.local/share/applications/amd64.desktop
[Desktop Entry]
Name=Terminal (amd64)
Type=Application
Comment=Launch amd64-arm environment
Exec=x-terminal-emulator --title="Terminal amd64-arm" -e "/usr/bin/amd64"
Icon=terminal
Terminal=false
Categories=Utility;
EOF

# Create launcher script
cat <<'EOF' > /usr/bin/amd64
#!/bin/bash
exec schroot -c amd64 -u root -d /home /bin/bash
EOF
chmod 755 /usr/bin/amd64

echo 'Reboot? Required for amd64-arm to work properly. Press ENTER to reboot, ^C to cancel.'
read
reboot